#+TITLE: Preterm Birth Fine Mapping
#+SETUPFILE: setup.org


* Cluster configuration

I start off by defining some absolute directories that will be referred to throughout the script.  
The motivation for the structure of this yaml file is that I can run the analysis on 
different clusters and only have to change/add a ~path~ object and a ~flag~ file (a file
or directory  that exists only on the file system for that machine)

#+BEGIN_SRC yaml :tangle ../workflow/config_base.yaml
  ---
  flag_file: &hst !Host {options: {midway2: "/project2", gardner: "/gpfs/data/xhe-lab/", desktop: "/run/media/nwknoblauch/Data"} }
  paths: 
    'DL': &dl  !Dep {host: *hst, pref:  null, path: { midway2: "/project2/xinhe/", gardner: "/gpfs/data/xhe-lab/", desktop: "/run/media/nwknoblauch/Data/"}}
    '1KG':     !Dep {host: *hst, pref: *dl, path: {midway2: &1kg "1kg/", gardner: *1kg , desktop: *1kg} }
    'OBERF':   !Dep {host: *hst, pref: *dl, path: {midway2: "missing_file", gardner: 'Ober/', desktop: '' } }
    'BED':     !Dep {host: *hst, pref: *dl, path: {midway2: &bed "genomic_annotation/ptb_epigenetic/", gardner: *bed, desktop: "ptb_scratch/new_bed/"}}
    'L2':      !Dep {host: *hst, pref: *dl, path: {midway2: &l2 "genomic_annotation/L2/", gardner: *l2, desktop: "L2/"}}
    'ANNO':    !Dep {host: *hst, pref: *dl, path: {midway2: "nwknoblauch/torus_annotations/", gardner: "genomic_annotation/torus_annotations/", desktop: "genomic_annotation/torus_annotations/"}}
    'FINEMAP': !Dep {host: *hst, pref: *dl, path: {midway2: "nwknoblauch/susie_finemapping/", gardner: "genomic_annotation/susie_finemapping/", desktop: "genomic_annotation/susie_finemapping/"}}
    'WEIGHTS': !Dep {host: *hst, pref: *dl, path: {midway2: &weight "1kg/1000G_Phase3_weights_hm3_no_MHC/", gardner: *weight, desktop: *weight}} 
    'FRQF':    !Dep {host: *hst, pref: *dl, path: {midway2: &frq "1kg/1000G_Phase3_frq/", gardner: *frq, desktop: "1kg/1000G_Phase3_frq/"}} 
    'GWAS':    !Dep {host: *hst, pref: null, path: {midway2: &gwas "ptb/", gardner: "/scratch/t.cri.nknoblauch/ptb_scratch/", desktop: "/run/media/nwknoblauch/Data/gwas_data/gwas_sumstats/"}}
    'UKB_LDSC':    !Dep {host: *hst, pref: *dl, path: {midway2: &ukbldsc "ukb_ldsc/", gardner: *ukbldsc, desktop: "../Backup412/ukb_ldsc/"}}
    'UKB_BGEN':    !Dep {host: *hst, pref: null, path: {midway2:  "", gardner: "/gpfs/data/pierce-lab/uk-biobank-genotypes/", desktop: "/run/media/nwknoblauch/Data/DGN/hg19"}}
    'UKB_PED':    !Dep {host: *hst, pref: null, path: {midway2:  "", gardner: "/scratch/t.cri.nknoblauch/intersect_snplist/ukb_subset/", desktop: "/run/media/nwknoblauch/Data/DGN/hg19"}}
    'SNPLIST_D':  !Dep {host: *hst, pref: null, path: {midway2:  "", gardner: "/scratch/t.cri.nknoblauch/intersect_snplist/", desktop: ""}}
    'LDSC':    !Dep {host: *hst, pref: null, path: {midway2: &ldsc "module load /home/nwknoblauch/spack_modules/ldsc/1.0.3; ", gardner: "spack env activate ldsc_v &&", desktop: "spack load py-ldsc-git && "}}
    'TORUS_CMD': !Dep {host: *hst, pref: null, path: {midway2: &cmd "", gardner: "", desktop: "/run/media/nwknoblauch/Backup412/spack/opt/spack/linux-manjaro19-haswell/gcc-9.3.0/dap-cmake-git-master-wotuvad7zivnzwvlztsobu4llto5owdi/bin/torus"}}
  envs:
    'r':    !Dep {host: *hst, pref:  null, path: { midway2: null, gardner: null, desktop: null }}
    'ldsc': !Dep {host: *hst, pref:  null, path: { midway2: null, gardner: null, desktop: null }}
    'cmd_prefix': !Dep {host: *hst, pref:  null, path: { midway2: "", gardner: "spack env activate ger; ", desktop: ". /run/media/nwknoblauch/Backup412/spack/share/spack/setup-env.sh;"  }}
#+END_SRC

** Config :noexport:

#+BEGIN_SRC R :tangle ../scripts/parse_yaml.R

  config_basef <- "../workflow/config_base.yaml"
  annotf <- "../workflow/annots.yaml"

  host_fun <- function(x) {
    xo <- x$options
    for (n in names(xo)) {
      if (fs::dir_exists(xo[[n]])) {
        return(n)
      }
    }
  }

  dep_fun <- function(x) {
    if (is.null(x$pref)) 
      return(x$path[[x$host]])
    return(fs::path(x$pref,x$path[[x$host]]))
  }

  handler_l <- list(
    Host = host_fun,
    Dep = dep_fun
  )

  config <- yaml::read_yaml(
                      config_basef,
                    handlers =  handler_l)
  config_d <- config$paths
  annot <- yaml::read_yaml(annotf)
#+END_SRC


#+BEGIN_SRC yaml :tangle ../workflow/cluster_config.yaml
  ---
  __default__:
    partition: 'broadwl'
    time: '01:00:00'
    nodes: '1'
    ntasks: '1'
    cpuspertask: '1'
    output: "output/{rule}_{wildcards}_txt"
    error: "error/{rule}_{wildcards}_txt"
    export: "ALL"
    mem: '12gb'
  gcta_h2:
    time: '00:20:00'
    mem: '16gb'
  poly_sim_pheno:
    time: '01:00:00'
    mem: '25gb'
  plink_gwas_cov:
    time: '01:30:00'
    mem: '16gb'
    cpuspertask: '12'
  all_gen_grm:
    time: '00:10:00'
    mem: '4gb'
  anno2torus_fdr:
    mem: '45G'
  ldshrink_ld:
    mem: '22gb'
    time: '01:00:00'
  rssp:
    mem: '32gb'
    time: '01:25:00'
  run_ldsc:
    mem: '45gb'
    time: '02:00:00'
  run_fastqtl_region:
    mem: '3gb'
    time: '00:30:00'
#+END_SRC


#+BEGIN_SRC  R :results output :eval no
  library(ldmap)
  library(tidyverse)
  lddf <- tibble::enframe(ldetect_EUR) %>%
    explode_ldmap_region() %>% mutate(chrom = as.integer(chrom))
  jsonlite::toJSON(lddf)
#+END_SRC

* Baseline model

#+BEGIN_SRC yaml :tangle ../workflow/base_model.yaml
  - 'Coding_UCSCL2'
  - 'Coding_UCSC.flanking.500L2'
  - 'Conserved_LindbladTohL2'
  - 'Conserved_LindbladToh.flanking.500L2'
  - 'CTCF_HoffmanL2'
  - 'CTCF_Hoffman.flanking.500L2'
  - 'DGF_ENCODEL2'
  - 'DGF_ENCODE.flanking.500L2'
  - 'DHS_peaks_TrynkaL2'
  - 'DHS_TrynkaL2'
  - 'DHS_Trynka.flanking.500L2'
  - 'Enhancer_AnderssonL2'
  - 'Enhancer_Andersson.flanking.500L2'
  - 'Enhancer_HoffmanL2'
  - 'Enhancer_Hoffman.flanking.500L2'
  - 'FetalDHS_TrynkaL2'
  - 'FetalDHS_Trynka.flanking.500L2'
  - 'H3K27ac_HniszL2'
  - 'H3K27ac_Hnisz.flanking.500L2'
  - 'H3K27ac_PGC2L2'
  - 'H3K27ac_PGC2.flanking.500L2'
  - 'H3K4me1_peaks_TrynkaL2'
  - 'H3K4me1_TrynkaL2'
  - 'H3K4me1_Trynka.flanking.500L2'
  - 'H3K4me3_peaks_TrynkaL2'
  - 'H3K4me3_TrynkaL2'
  - 'H3K4me3_Trynka.flanking.500L2'
  - 'H3K9ac_peaks_TrynkaL2'
  - 'H3K9ac_TrynkaL2'
  - 'H3K9ac_Trynka.flanking.500L2'
  - 'Intron_UCSCL2'
  - 'Intron_UCSC.flanking.500L2'
  - 'PromoterFlanking_HoffmanL2'
  - 'PromoterFlanking_Hoffman.flanking.500L2'
  - 'Promoter_UCSCL2'
  - 'Promoter_UCSC.flanking.500L2'
  - 'Repressed_HoffmanL2'
  - 'Repressed_Hoffman.flanking.500L2'
  - 'SuperEnhancer_HniszL2'
  - 'SuperEnhancer_Hnisz.flanking.500L2'
  - 'TFBS_ENCODEL2'
  - 'TFBS_ENCODE.flanking.500L2'
  - 'Transcr_HoffmanL2'
  - 'Transcr_Hoffman.flanking.500L2'
  - 'TSS_HoffmanL2'
  - 'TSS_Hoffman.flanking.500L2'
  - 'UTR_3_UCSCL2'
  - 'UTR_3_UCSC.flanking.500L2'
  - 'UTR_5_UCSCL2'
  - 'UTR_5_UCSC.flanking.500L2'
  - 'WeakEnhancer_HoffmanL2'
  - 'WeakEnhancer_Hoffman.flanking.500L2'
  - 'GERP.NSL2'
  - 'GERP.RSsup4L2'
  - 'MAFbin1L2'
  - 'MAFbin2L2'
  - 'MAFbin3L2'
  - 'MAFbin4L2'
  - 'MAFbin5L2'
  - 'MAFbin6L2'
  - 'MAFbin7L2'
  - 'MAFbin8L2'
  - 'MAFbin9L2'
  - 'MAFbin10L2'
  - 'MAF_Adj_Predicted_Allele_AgeL2'
  - 'MAF_Adj_LLD_AFRL2'
  - 'Recomb_Rate_10kbL2'
  - 'Nucleotide_Diversity_10kbL2'
  - 'Backgrd_Selection_StatL2'
  - 'CpG_Content_50kbL2'
  - 'MAF_Adj_ASMCL2'
  - 'GTEx_eQTL_MaxCPPL2'
  - 'BLUEPRINT_H3K27acQTL_MaxCPPL2'
  - 'BLUEPRINT_H3K4me1QTL_MaxCPPL2'
  - 'BLUEPRINT_DNA_methylation_MaxCPPL2'
  - 'synonymousL2'
  - 'non_synonymousL2'
  - 'Conserved_Vertebrate_phastCons46wayL2'
  - 'Conserved_Vertebrate_phastCons46way.flanking.500L2'
  - 'Conserved_Mammal_phastCons46wayL2'
  - 'Conserved_Mammal_phastCons46way.flanking.500L2'
  - 'Conserved_Primate_phastCons46wayL2'
  - 'Conserved_Primate_phastCons46way.flanking.500L2'
  - 'BivFlnkL2'
  - 'BivFlnk.flanking.500L2'
  - 'Human_Promoter_VillarL2'
  - 'Human_Promoter_Villar.flanking.500L2'
  - 'Human_Enhancer_VillarL2'
  - 'Human_Enhancer_Villar.flanking.500L2'
  - 'Ancient_Sequence_Age_Human_PromoterL2'
  - 'Ancient_Sequence_Age_Human_Promoter.flanking.500L2'
  - 'Ancient_Sequence_Age_Human_EnhancerL2'
  - 'Ancient_Sequence_Age_Human_Enhancer.flanking.500L2'
  - 'Human_Enhancer_Villar_Species_Enhancer_CountL2'
  - 'Human_Promoter_Villar_ExACL2'
  - 'Human_Promoter_Villar_ExAC.flanking.500L2'
#+END_SRC

* Pipeline configurations

** Model parameters

There are a lot of annotations we've been working with.
Under each heading are the annotations associated with that model.
~clean~ and ~full~ refer to LD score regression baselines.
under ~ptb_torus_model~ are the features used for ~torus~

#+BEGIN_SRC yaml :tangle ../workflow/annots.yaml
  ---
  clean:
    - base
    - Coding_UCSC
    - Conserved_LindbladToh
    - Intron_UCSC
    - PromoterFlanking_Hoffman
    - Promoter_UCSC
    - Transcr_Hoffman
    - TSS_Hoffman
    - UTR_3_UCSC
    - UTR_5_UCSC
    - GERP.NS
    - GERP.RSsup4
    - MAFbin1
    - MAFbin2
    - MAFbin3
    - MAFbin4
    - MAFbin5
    - MAFbin6
    - MAFbin7
    - MAFbin8
    - MAFbin9
    - MAFbin10
    - MAF_Adj_Predicted_Allele_Age
    - MAF_Adj_LLD_AFR
    - Recomb_Rate_10kb
    - Nucleotide_Diversity_10kb
    - Backgrd_Selection_Stat
    - CpG_Content_50kb
    - MAF_Adj_ASMC
    - synonymous
    - non_synonymous
    - Conserved_Vertebrate_phastCons46way
    - Conserved_Mammal_phastCons46way
    - Conserved_Primate_phastCons46way
    - BivFlnk
  full: 
    - base
    - Coding_UCSC
    - Conserved_LindbladToh
    - CTCF_Hoffman
    - DGF_ENCODE
    - DHS_peaks_Trynka
    - DHS_Trynka
    - Enhancer_Andersson
    - Enhancer_Hoffman
    - FetalDHS_Trynka
    - H3K27ac_Hnisz
    - H3K27ac_PGC2
    - H3K4me1_peaks_Trynka
    - H3K4me1_Trynka
    - H3K4me3_peaks_Trynka
    - H3K4me3_Trynka
    - H3K9ac_peaks_Trynka
    - H3K9ac_Trynka
    - Intron_UCSC
    - PromoterFlanking_Hoffman
    - Promoter_UCSC
    - Repressed_Hoffman
    - SuperEnhancer_Hnisz
    - TFBS_ENCODE
    - Transcr_Hoffman
    - TSS_Hoffman
    - UTR_3_UCSC
    - UTR_5_UCSC
    - WeakEnhancer_Hoffman
    - GERP.NS
    - GERP.RSsup4
    - MAFbin1
    - MAFbin2
    - MAFbin3
    - MAFbin4
    - MAFbin5
    - MAFbin6
    - MAFbin7
    - MAFbin8
    - MAFbin9
    - MAFbin10
    - MAF_Adj_Predicted_Allele_Age
    - MAF_Adj_LLD_AFR
    - Recomb_Rate_10kb
    - Nucleotide_Diversity_10kb
    - Backgrd_Selection_Stat
    - CpG_Content_50kb
    - MAF_Adj_ASMC
    - GTEx_eQTL_MaxCPP
    - BLUEPRINT_H3K27acQTL_MaxCPP
    - BLUEPRINT_H3K4me1QTL_MaxCPP
    - BLUEPRINT_DNA_methylation_MaxCPP
    - synonymous
    - non_synonymous
    - Conserved_Vertebrate_phastCons46way
    - Conserved_Mammal_phastCons46way
    - Conserved_Primate_phastCons46way
    - BivFlnk
    - Human_Promoter_Villar
    - Human_Enhancer_Villar
    - Ancient_Sequence_Age_Human_Promoter
    - Ancient_Sequence_Age_Human_Enhancer
    - Human_Enhancer_Villar_Species_Enhancer_Count
    - Human_Promoter_Villar_ExAC
  ptb_torus_model:
    allhic:
      - chip-seq-dec_diff-H3K27ac
      - chip-seq-reproducible-ctr-H3K4me1
      - hicd-seq-both-dec-HIC
    treatedhic:
      - chip-seq-reproducible-dec-H3K27ac
      - chip-seq-reproducible-dec-H3K4me1
      - hicd-seq-both-dec-HIC
    reproduciblemerged:
      - chip-seq-reproducible-ctr-H3K4me3
      - chip-seq-reproducible-dec-H3K4me3
      - chip-seq-reproducible-dec-H3K27ac
      - chip-seq-reproducible-ctr-H3K27ac
      - chip-seq-reproducible-dec-H3K4me1
      - chip-seq-reproducible-ctr-H3K4me1
      - atac-seq-reproducible-dec-ATAC
      - atac-seq-reproducible-ctr-ATAC
      - atac-seq-dec_diff-ATAC
      - chip-seq-dec_diff-H3K4me3
      - chip-seq-dec_diff-H3K27ac
      - chip-seq-dec_diff-H3K4me1
      - hicd-seq-both-dec-HIC
    utme3treatedhic:
      - chip-seq-reproducible-ctr-H3K4me3
      - chip-seq-reproducible-dec-H3K27ac
      - chip-seq-reproducible-dec-H3K4me1
      - hicd-seq-both-dec-HIC
    untreatedhic:
      - chip-seq-reproducible-ctr-H3K27ac
      - chip-seq-reproducible-ctr-H3K4me1
      - hicd-seq-both-dec-HIC
    targethic:
      - chip-seq-dec_diff-H3K27ac
      - chip-seq-reproducible-ctr-H3K4me1
      - hicd-seq-target-dec-HIC
    baithic:
      - chip-seq-dec_diff-H3K27ac
      - chip-seq-reproducible-ctr-H3K4me1
      - hicd-seq-bait-dec-HIC
    tcmdec:
      - atac-seq-reproducible-pl_dec-ATAC
      - atac-seq-reproducible-pl_tcm-ATAC
      - atac-seq-reproducible-tl_tcm-ATAC
      - atac-seq-reproducible-tl_dec-ATAC
    atac:
      - atac-seq-reproducible-dec-ATAC
      - atac-seq-reproducible-ctr-ATAC
  ptb_ldsc_model:
    nopooled: 
      - chip-seq-reproducible-ctr-H3K4me3
      - chip-seq-reproducible-dec-H3K27ac
      - chip-seq-reproducible-dec-H3K4me3
      - chip-seq-reproducible-dec-H3K4me1
      - chip-seq-reproducible-ctr-H3K4me1
      - atac-seq-reproducible-dec-ATAC
      - chip-seq-reproducible-ctr-H3K27ac
      - atac-seq-reproducible-ctr-ATAC
      - chip-seq-dec_up-H3K4me1
      - chip-seq-dec_up-H3K4me3
      - atac-seq-dec_down-ATAC
      - chip-seq-dec_up-H3K27ac
      - chip-seq-dec_down-H3K4me3
      - atac-seq-dec_up-ATAC
      - chip-seq-dec_down-H3K27ac
      - chip-seq-dec_down-H3K4me1
    full: 
      - chip-seq-pooled-DSC1-dec-H3K27ac
      - atac-seq-pooled-DSC2-dec-ATAC
      - chip-seq-pooled-DSC1-ctr-H3K4me3
      - atac-seq-pooled-DSC3-ctr-ATAC
      - chip-seq-pooled-DSC3-ctr-H3K4me1
      - chip-seq-pooled-DSC1-ctr-H3K4me1
      - atac-seq-pooled-DSC1-ctr-ATAC
      - chip-seq-pooled-DSC3-dec-H3K4me3
      - chip-seq-pooled-DSC2-ctr-H3K4me1
      - chip-seq-pooled-DSC1-dec-H3K4me1
      - chip-seq-pooled-DSC2-ctr-H3K27ac
      - chip-seq-pooled-DSC2-dec-H3K4me1
      - chip-seq-pooled-DSC1-dec-H3K4me3
      - chip-seq-pooled-DSC2-dec-H3K27ac
      - chip-seq-pooled-DSC3-dec-H3K27ac
      - chip-seq-pooled-DSC3-dec-H3K4me1
      - chip-seq-pooled-DSC2-dec-H3K4me3
      - chip-seq-pooled-DSC2-ctr-H3K4me3
      - atac-seq-pooled-DSC1-dec-ATAC
      - chip-seq-pooled-DSC1-ctr-H3K27ac
      - atac-seq-pooled-DSC2-ctr-ATAC
      - atac-seq-pooled-DSC3-dec-ATAC
      - chip-seq-pooled-DSC3-ctr-H3K27ac
      - chip-seq-reproducible-ctr-H3K4me3
      - chip-seq-reproducible-dec-H3K27ac
      - chip-seq-reproducible-dec-H3K4me3
      - chip-seq-reproducible-dec-H3K4me1
      - chip-seq-reproducible-ctr-H3K4me1
      - atac-seq-reproducible-dec-ATAC
      - chip-seq-reproducible-ctr-H3K27ac
      - atac-seq-reproducible-ctr-ATAC
      - chip-seq-dec_up-H3K4me1
      - chip-seq-dec_up-H3K4me3
      - chip-seq-pooled-DSC3-ctr-H3K4me3
      - atac-seq-dec_down-ATAC
      - chip-seq-dec_up-H3K27ac
      - chip-seq-dec_down-H3K4me3
      - atac-seq-dec_up-ATAC
      - chip-seq-dec_down-H3K27ac
      - chip-seq-dec_down-H3K4me1
    tcmdec:
      - atac-seq-reproducible-pl_dec-ATAC
      - atac-seq-reproducible-pl_tcm-ATAC
      - atac-seq-reproducible-tl_tcm-ATAC
      - atac-seq-reproducible-tl_dec-ATAC
    tcmdecct:
      - atac-seq-reproducible-pl_dec-ATAC
      - atac-seq-reproducible-pl_tcm-ATAC
      - atac-seq-reproducible-tl_tcm-ATAC
      - atac-seq-reproducible-tl_dec-ATAC
      - atac-seq-reproducible-dec-ATAC
      - atac-seq-reproducible-ctr-ATAC
    reproducible:
      - chip-seq-reproducible-ctr-H3K4me3
      - chip-seq-reproducible-dec-H3K4me3
      - chip-seq-reproducible-dec-H3K27ac
      - chip-seq-reproducible-ctr-H3K27ac
      - chip-seq-reproducible-dec-H3K4me1
      - chip-seq-reproducible-ctr-H3K4me1
      - atac-seq-reproducible-dec-ATAC
      - atac-seq-reproducible-ctr-ATAC
    reproducibledec:
      - chip-seq-reproducible-dec-H3K4me3
      - chip-seq-reproducible-dec-H3K27ac
      - chip-seq-reproducible-dec-H3K4me1
      - atac-seq-reproducible-dec-ATAC
    reproduciblectr:
      - chip-seq-reproducible-ctr-H3K4me3
      - chip-seq-reproducible-ctr-H3K27ac
      - chip-seq-reproducible-ctr-H3K4me1
      - atac-seq-reproducible-ctr-ATAC
    reproducible_up_down:
      - chip-seq-reproducible-ctr-H3K4me3
      - chip-seq-reproducible-dec-H3K4me3
      - chip-seq-reproducible-dec-H3K27ac
      - chip-seq-reproducible-ctr-H3K27ac
      - chip-seq-reproducible-dec-H3K4me1
      - chip-seq-reproducible-ctr-H3K4me1
      - atac-seq-reproducible-dec-ATAC
      - atac-seq-reproducible-ctr-ATAC
      - chip-seq-dec_up-H3K4me1
      - chip-seq-dec_up-H3K4me3
      - atac-seq-dec_down-ATAC
      - chip-seq-dec_up-H3K27ac
      - chip-seq-dec_down-H3K4me3
      - atac-seq-dec_up-ATAC
      - chip-seq-dec_down-H3K27ac
      - chip-seq-dec_down-H3K4me1
      - hicd-seq-bait-dec-HIC
      - hicd-seq-target-dec-HIC
    reproduciblemerged:
      - chip-seq-reproducible-ctr-H3K4me3
      - chip-seq-reproducible-dec-H3K4me3
      - chip-seq-reproducible-dec-H3K27ac
      - chip-seq-reproducible-ctr-H3K27ac
      - chip-seq-reproducible-dec-H3K4me1
      - chip-seq-reproducible-ctr-H3K4me1
      - atac-seq-reproducible-dec-ATAC
      - atac-seq-reproducible-ctr-ATAC
      - atac-seq-dec_diff-ATAC
      - chip-seq-dec_diff-H3K4me3
      - chip-seq-dec_diff-H3K27ac
      - chip-seq-dec_diff-H3K4me1
      - hicd-seq-both-dec-HIC
    reproduciblemergedtcm:
      - chip-seq-reproducible-ctr-H3K4me3
      - chip-seq-reproducible-dec-H3K4me3
      - chip-seq-reproducible-dec-H3K27ac
      - chip-seq-reproducible-ctr-H3K27ac
      - chip-seq-reproducible-dec-H3K4me1
      - chip-seq-reproducible-ctr-H3K4me1
      - atac-seq-reproducible-dec-ATAC
      - atac-seq-reproducible-ctr-ATAC
      - atac-seq-dec_diff-ATAC
      - chip-seq-dec_diff-H3K4me3
      - chip-seq-dec_diff-H3K27ac
      - chip-seq-dec_diff-H3K4me1
      - hicd-seq-both-dec-HIC
      - atac-seq-reproducible-pl_dec-ATAC
      - atac-seq-reproducible-pl_tcm-ATAC
      - atac-seq-reproducible-tl_tcm-ATAC
      - atac-seq-reproducible-tl_dec-ATAC
    reproduciblenodiff:
      - chip-seq-reproducible-ctr-H3K4me3
      - chip-seq-reproducible-dec-H3K4me3
      - chip-seq-reproducible-dec-H3K27ac
      - chip-seq-reproducible-ctr-H3K27ac
      - chip-seq-reproducible-dec-H3K4me1
      - chip-seq-reproducible-ctr-H3K4me1
      - atac-seq-reproducible-dec-ATAC
      - atac-seq-reproducible-ctr-ATAC
      - hicd-seq-both-dec-HIC
    reproduciblenodiffcsmc:
      - chip-seq-reproducible-ctr-H3K4me3
      - chip-seq-reproducible-dec-H3K4me3
      - chip-seq-reproducible-dec-H3K27ac
      - chip-seq-reproducible-ctr-H3K27ac
      - chip-seq-reproducible-dec-H3K4me1
      - chip-seq-reproducible-ctr-H3K4me1
      - atac-seq-reproducible-dec-ATAC
      - atac-seq-reproducible-ctr-ATAC
      - hicd-seq-both-dec-HIC
      - peaks-cervical_smooth_muscle_cells
    reproduciblenodiffaorta:
      - chip-seq-reproducible-ctr-H3K4me3
      - chip-seq-reproducible-dec-H3K4me3
      - chip-seq-reproducible-dec-H3K27ac
      - chip-seq-reproducible-ctr-H3K27ac
      - chip-seq-reproducible-dec-H3K4me1
      - chip-seq-reproducible-ctr-H3K4me1
      - atac-seq-reproducible-dec-ATAC
      - atac-seq-reproducible-ctr-ATAC
      - hicd-seq-both-dec-HIC
      - chip-seq-reproducible-aorta-H3K4me1
      - chip-seq-reproducible-aorta-H3K4me3
      - chip-seq-reproducible-aorta-H3K27ac
    reproduciblenodifffinte:
      - chip-seq-reproducible-ctr-H3K4me3
      - chip-seq-reproducible-dec-H3K4me3
      - chip-seq-reproducible-dec-H3K27ac
      - chip-seq-reproducible-ctr-H3K27ac
      - chip-seq-reproducible-dec-H3K4me1
      - chip-seq-reproducible-ctr-H3K4me1
      - atac-seq-reproducible-dec-ATAC
      - atac-seq-reproducible-ctr-ATAC
      - hicd-seq-both-dec-HIC
      - chip-seq-reproducible-finte-H3K4me1
      - chip-seq-reproducible-finte-H3K4me3
      - chip-seq-reproducible-finte-H3K27ac
    reproduciblenodiffliver:
      - chip-seq-reproducible-ctr-H3K4me3
      - chip-seq-reproducible-dec-H3K4me3
      - chip-seq-reproducible-dec-H3K27ac
      - chip-seq-reproducible-ctr-H3K27ac
      - chip-seq-reproducible-dec-H3K4me1
      - chip-seq-reproducible-ctr-H3K4me1
      - atac-seq-reproducible-dec-ATAC
      - atac-seq-reproducible-ctr-ATAC
      - hicd-seq-both-dec-HIC
      - chip-seq-reproducible-liver-H3K4me1
      - chip-seq-reproducible-liver-H3K4me3
      - chip-seq-reproducible-liver-H3K27ac
    reproduciblemergedcsmc:
      - chip-seq-reproducible-ctr-H3K4me3
      - chip-seq-reproducible-dec-H3K4me3
      - chip-seq-reproducible-dec-H3K27ac
      - chip-seq-reproducible-ctr-H3K27ac
      - chip-seq-reproducible-dec-H3K4me1
      - chip-seq-reproducible-ctr-H3K4me1
      - atac-seq-reproducible-dec-ATAC
      - atac-seq-reproducible-ctr-ATAC
      - atac-seq-dec_diff-ATAC
      - chip-seq-dec_diff-H3K4me3
      - chip-seq-dec_diff-H3K27ac
      - chip-seq-dec_diff-H3K4me1
      - hicd-seq-both-dec-HIC
      - peaks-cervical_smooth_muscle_cells
#+END_SRC

** Snakemake Analysis Pipeline

The entire pipeline from downloading data to running analysis to generating figures for the paper are all available in this repository.  
There are additional software dependencies obviously not in this directory but they are all publicly available 

** Master rule

#+BEGIN_SRC snakemake :tangle ../workflow/snakefile
  import os
  import yaml
  from yaml import Loader
  import json
  import re

  # with open('../workflow/regs.txt') as reg_file:
  #   all_regions = [int(x)-1 for x in reg_file]

  with open('../workflow/ldetect_ch.json') as json_file:
      ldetect_data = json.load(json_file)

  def host_loader(loader,node):
      fields = loader.construct_mapping(node,deep=True)
      options=fields['options']
      # print([options[name] for name in options.keys()])
      ret_opt = [name for name in options.keys() if os.path.exists(options[name])]
      # print(ret_opt)
      return ret_opt[0]


  def dep_loader(loader,node):
      options = loader.construct_mapping(node,deep=True)
      host = options['host']
      pref = options['pref']
      # print(pref)
      host =options['host']
      path = options['path']
      full_path = pref+path[host] if pref is not None else path[host]
      return full_path

  yaml.Loader.add_constructor('!Host', host_loader)
  yaml.Loader.add_constructor('!Dep', dep_loader)


  with open("../workflow/config_base.yaml") as stream:
      config=yaml.load(stream,Loader=Loader)

  config_d = config['paths']
  config_e = config['envs']
  shell.prefix(config_e['cmd_prefix'])



  def anno_files(anno):
    return expand(config_d['BED'] +"{anno_name}.bed",anno_name=anno)

  with open("../workflow/annots.yaml", 'r') as stream:
      all_annot = yaml.safe_load(stream)
        #(all_annot)

  wildcard_constraints:
      h2="[+-]?[0-9]+\.[0-9]+"
 
  #      chrom="\d+",
  #      gwas="[fgdptb]+",
  #      new_base="[a-z]+",
  #      region_id="\d+"

  #localrules: all,get_hm3_snplist,get_plinkfiles,get_frq,get_weights,get_narrowpeak_aorta,get_narrowpeak_finte,get_narrowpeak_liver,prep_covars

  #include: "h5_gwas_snakefile"
  include: "dl_hm3_snakefile"
  include: "dl_snakefile"
  include: "dl_gwas_snakefile"


  #include: "eqtl_snakefile"
  include: "gwas_snakefile"
  include: "susie_snakefile"
  include: "ldsc_snakefile"
  #include: "plot_snakefile"

  include: "ukb_snakefile"
  localrules: cat_grm_bin,cat_grm_N_bin,cat_filef
  #include: "baseline_ldsc_snakefile" 

  # all_ukb_traits,= glob_wildcards(config_d["UKB_LDSC"]+"{ukbtrait}.tsv.bgz")
  # print(all_ukb_traits[0:10])
  rule all:
      input:
          expand("results/{gwas}/{anno_name}.results",gwas="ptb",anno_name="tcmdecct"),
          expand("singletorus_ptb_{anno}_mv.RDS",anno=["utme3treatedhic","tcmdec","atac"])
  #expand(config_d["GWAS"]+"gwas_covar_fl_panel/{h2}_{nt}_10",h2=[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8],nt=[30]),
           #expand(config_d["GWAS"]+"gwas_covar_fl_ind/{h2}_{nt}_10",h2=[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8],nt=[30])

  #        expand("results/ukb_noi/{ukb_trait}.log",ukb_trait=all_ukb_traits)
  # expand("singletorus_{gwas}_{anno_name}_mv.RDS",gwas=["ptb","fgd"],anno_name=["tcmdec","utme3treatedhic"]),
  #           config_d['ANNO'] +"tcmdec.txt.gz",
  #           

#+END_SRC

** Running FastQTL 

I ended up not using fastqtl 

#+BEGIN_SRC snakemake :mkdirp :tangle ../workflow/eqtl_snakefile
  rule prep_covars:
      input:
          config_d['OBERF']+'covariates/AllColumnNames_final53_PC.txt.gz'
      params:
          HL = lambda wildcards: str(int(wildcards.PCN)+13)
      output:
          config_d['OBERF']+'covariates/covarlist_{PCN}.txt.gz'
      shell:
          "zcat {input} | head -n {params.HL} | gzip -c > {output}"

  rule fix_vcf:
      input:
          vcf=config_d['OBERF']+"genotypes/chr{chrom}.dose.vcf.gz",
          samples=config_d['OBERF']+"new_id.txt"
      output:
          vcf=config_d['OBERF']+"genotypes/new_chr{chrom}.dose.vcf.gz"
      params:
          bcft="/gpfs/data/xhe-lab/software/spack/opt/spack/linux-redhatenterprisecomputenode6-haswell/gcc-9.2.0/bcftools-1.9-goevgxsrdzddc35cwrixhankcktu4xfj/bin/bcftools"
      shell:
          "{params.bcft} reheader --samples {input.samples} {input.vcf} -o {output.vcf}"

  rule idx_vcf:
      input:
          vcf=config_d['OBERF']+"genotypes/new_chr{chrom}.dose.vcf.gz"
      output:
          idx=config_d['OBERF']+"genotypes/new_chr{chrom}.dose.vcf.gz.tbi"
      shell:
          "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/htslib-1.9-j2ibkw6g7h4v6a5umnfhuwyyk34aldr5/bin/tabix {input.vcf}"

  def format_ldch(elem):
      return str(elem['chrom'])+":"+str(elem['start'])+'-'+str(elem['end'])

  def ldmap_rf(wildcards):
      rchrom = ldetect_data[int(wildcards.region_id)]['chrom']
      return config_d['1KG'] +f"1000G_EUR_Phase3_plink/h5/1000G.EUR.QC.{rchrom}.h5"

  rule run_fastqtl_region:
      input:
          exp=config_d['OBERF']+'phenotypes/Final_GeneExprDetected.7.bed.gz',
          cov=expand(config_d['OBERF']+'covariates/covarlist_{PCN}.txt.gz',PCN=range(5))
          samples=config_d['OBERF']+'samples.txt',
          vcf=lambda wildcards: config_d['OBERF']+"genotypes/new_chr"+str(ldetect_data[int(wildcards.region_id)]['chrom'])+".dose.vcf.gz",
          vcfi=lambda wildcards: config_d['OBERF']+"genotypes/new_chr"+str(ldetect_data[int(wildcards.region_id)]['chrom'])+".dose.vcf.gz.tbi"
      output:
          outputf=config_d['OBERF']+'output/{region_id}_{PCN}.txt.gz'
      params:
          region = lambda wildcards: format_ldch(ldetect_data[int(wildcards.region_id)])
      shell:
          "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/yesterdayqtl-master-wpcshqtonksv576xlubn5bejtx3vm5ci/bin/fastqtl --vcf {input.vcf} --bed {input.exp} --cov {input.cov} --out {output} -R {params.region} --include-samples {input.samples} "


  # rule run_fastqtl_gata2:
  #     input:
  #         vcf=config_d['OBERF']+'genotypes/new_chr3.dose.vcf.gz',
  #         exp=config_d['OBERF']+'phenotypes/Final_GeneExprDetected.7.bed.gz',
  #         cov=config_d['OBERF']+'covariates/covarlist_{PCN}.txt.gz',
  #         samples=config_d['OBERF']+'samples.txt'
  #     output:
  #         outputf="fastqtl/GATA2_{PCN}.txt"
  #     shell:
  #         "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/yesterdayqtl-master-wpcshqtonksv576xlubn5bejtx3vm5ci/bin/fastqtl --vcf {input.vcf} --bed {input.exp} --cov {input.cov} --out {output} -R 3:128194861-130244735 --include-samples {input.samples} "


  # rule run_fastqtl_hand2:
  #     input:
  #         vcf=config_d['OBERF']+'genotypes/new_chr4.dose.vcf.gz',
  #         exp=config_d['OBERF']+'phenotypes/Final_GeneExprDetected.7.bed.gz',
  #         cov=config_d['OBERF']+'covariates/covarlist_{PCN}.txt.gz',
  #         samples=config_d['OBERF']+'samples.txt'
  #     output:
  #         outputf="fastqtl/HAND2_{PCN}.txt"
  #     shell:
  #         "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/yesterdayqtl-master-wpcshqtonksv576xlubn5bejtx3vm5ci/bin/fastqtl --vcf {input.vcf} --bed {input.exp} --cov {input.cov} --out {output} -R 4:174264132-176570716 --include-samples {input.samples}"

#+END_SRC



** fine mapping with eqtl data

#+BEGIN_SRC R 

  library(tidyverse)
  library(fs)
  library(ldmap)
  fmap_df <- readRDS("/home/nwknoblauch/Dropbox/scratch/ptb_scratch/ptb_utme3treatedhic.RDS")


#+END_SRC

** Generating Plots

#+BEGIN_SRC snakemake  :tangle ../workflow/plot_snakefile

  def gene_reg(wildcards):
      rchrom = ldetect_data[int(wildcards.region_id)-1]['chrom']
      start = ldetect_data[int(wildcards.region_id)-1]['start']
      stop = ldetect_data[int(wildcards.region_id)-1]['end']
      ret_dict = { 'chrom': 'chr'+str(rchrom),
                   'start': start,
                   'end': stop}
      return ret_dict


  rule gene_plot:
        params:
            gene_reg
        output:
            outputf="results/plot_data/genes/{region_id}.RDS",
            genelistf="results/plot_data/genes/{region_id}_genelist.txt.gz"
        script:
            "../scripts/ldmr_geneplot_data.R"


  def anno_plot_fun(wildcards):
      anno_name = wildcards.anno_name
      region_id = wildcards.region_id
      hicm = re.compile('^hic')
      annol = all_annot['ptb_torus_model'].get(anno_name)
      print(annol)
      annok = [x for x in annol if not hicm.match(x)]
      ret_dict = {
          'annof' : anno_files(annok )
      }
      return ret_dict


  rule anno_data_plot:
      input:
          unpack(anno_plot_fun)
      params:
          anno_names= lambda wildcards: [x for x in all_annot['ptb_torus_model'].get(wildcards.anno_name) if not re.compile('^hic').match(x)],
          region_id="{region_id}"
      output:
          anno="results/plot_data/anno/{anno_name}_{region_id}.RDS"
      script:
          "../scripts/ldmr_annoplot_data.R"



  rule gwas_p_data_plot:
      input:
          pipf = config_d['FINEMAP']+"torus_{gwas}_{anno_name}/{region_id}.RDS",
          gwasf = config_d['GWAS'] +"{gwas}_gwas.h5",
          ldgf = config_d['GWAS']+ "{gwas}_gwas_ldetect.RDS",
          priorf = config_d['ANNO'] +"torus_{gwas}_{anno_name}/{region_id}.RDS"
      params:
          region_id="{region_id}"
      output:
          gwas="results/plot_data/susie/{gwas}_{anno_name}_{region_id}.RDS"
      script:
          "../scripts/ldmr_pplot_data.R"

  rule gwas_np_data_plot:
      input:
          pipf = config_d['FINEMAP']+"torus_ptb/{region_id}.RDS",
          gwasf = config_d['GWAS'] +"ptb_gwas.h5",
          ldgf = config_d['GWAS']+ "ptb_gwas_ldetect.RDS",
          priorf = config_d['ANNO'] +"torus_ptb/{region_id}.RDS"
      params:
          region_id="{region_id}"
      output:
          gwas="plot_data/susie/ptb_{region_id}.RDS"
      script:
          "../scripts/ldmr_pplot_data.R"



  rule hic_data_plot:
      input:
          hic=config_d['BED']+"DT1_dTL4_D_48h.ibed.bz2"
      params:
          region_id="{region_id}"
      output:
          hic="plot_data/hic/{region_id}.RDS"
      script:
          "../scripts/ldmr_hicplot_data.R"




  def ldplot(wildcards):
      regid = int(wildcards.region_id)
      rchrom = ldetect_data[regid]['chrom']
      return {'ldhf': config_d['1KG']+f"1000G_EUR_Phase3_plink/LD/{rchrom}_{regid}.h5"}


  rule ld_data_plot:
      input:
          unpack(ldplot)
      params:
          region_id="{region_id}"
      output:
          plotf="plot/LD/{region_id}.RDS",
          dataf="plot_data/LD/{region_id}.RDS"
      script:
          "../scripts/ldmr_ldplot.R"


#+END_SRC

#+BEGIN_SRC R :mkdirp :tangle ../scripts/ldmr_ldplot.R

  library(dplyr)
  library(tidyr)
  library(purrr)
  library(ggplot2)
  library(ldmap)
  library(EigenH5)
  library(Matrix)

  inputf <- snakemake@input[["ldhf"]]


  saveRDS(filter(df,r2 > 0.1),snakemake@output[["dataf"]])
  ld_plot  <- filter(df,r2 > 0.1) %>% ggplot() +
    geom_point(aes(positions(isnp) + y, y, color = r2, alpha = r2), size = rel(0.5)) +
    theme(axis.text.y = element_blank(),
          axis.ticks.y = element_blank()) +
    labs(x = "Position", y = NULL) +
    scale_alpha(guide = 'none')
  saveRDS(ld_plot,snakemake@output[["plotf"]])


#+END_SRC


*** Gene data

#+BEGIN_SRC R :mkdirp :tangle ../scripts/ldmr_geneplot_data.R

  library(stringr)
  library(Homo.sapiens)
  library(RColorBrewer)

  library(purrr)
  library(dplyr)
  library(biovizBase)
  library(Homo.sapiens)
  library(readr)

  txdb <- TxDb(Homo.sapiens)

  chrp <- snakemake@params[[1]][["chrom"]]
  stopifnot(!is.null(chrp))

  start <- snakemake@params[[1]][["start"]]
  stopifnot(!is.null(start))
  start <- as.integer(start)

  end <- snakemake@params[[1]][["end"]]
  stopifnot(!is.null(end))
  end <- as.integer(end)

  gr <- GenomicRanges::GRanges(seqnames = chrp,ranges=IRanges::IRanges(start = start,end = end))

  suppressMessages(tg_df <-
                     OrganismDbi::selectByRanges(
                                    x = Homo.sapiens,
                                    ranges = gr,
                                    columns = c("SYMBOL", "TXNAME")) %>%
                     as_tibble() %>%
                     dplyr::select(tx_name = TXNAME, symbol = SYMBOL) %>%
                     tidyr::unnest(cols = c(tx_name, symbol)))

  suppressMessages(gr.txdb <-
                     crunch(txdb, which = gr) %>%
                     as_tibble() %>%
                     mutate(tx_name = as.character(tx_name)) %>%
                     inner_join(tg_df) %>%
                     plyranges::as_granges() %>%
                     split(.$symbol))

  dplyr::as_tibble(tg_df) %>% distinct(symbol) %>% write_tsv(snakemake@output[["genelistf"]])
  saveRDS(unlist(gr.txdb),snakemake@output[["outputf"]])


#+END_SRC

*** Anno data

#+BEGIN_SRC R :mkdirp :tangle ../scripts/ldmr_annoplot_data.R


anno_files <- snakemake@input[["annof"]]
anno_names <- snakemake@params[["anno_names"]]
regid <- snakemake@params[["region_id"]]

  library(ldmap)
  library(stringr)
  library(EigenH5)
  library(tidyr)
  library(vroom)
  library(purrr)
  library(dplyr)

  anno_dff <- function(anno_files, anno_names, ldmrid) {
    map2_dfr(anno_files, anno_names, function(x, y) {
      read_bed(x, read_fun = purrr::partial(vroom::vroom, delim = "	")) %>%
        dplyr::filter(region_in_region(ldmap_region, ldetect_EUR,TRUE) == ldmrid) %>%
        mutate(anno = y)
    }) %>% mutate(ldmap_region=as_ldmap_region(ldmap_region))
  }




  stopifnot(!is.null(regid))


  anno_result_df <- anno_dff(anno_files, anno_names, as.integer(regid))



  saveRDS(anno_result_df, snakemake@output[["anno"]])

#+END_SRC




#+BEGIN_SRC R :mkdirp :tangle ../scripts/ldmr_pplot_data.R


    pipf <- snakemake@input[["pipf"]]
    gwasf <- snakemake@input[["gwasf"]]
    ldgf <- snakemake@input[["ldgf"]]
    regid <- snakemake@params[["region_id"]]
    priorf <- snakemake@input[["priorf"]]


#    #source("renv/activate.R")
    library(stringr)
    library(EigenH5)
    library(ldmap)
    library(readr)
    library(tidyr)
    library(vroom)
    library(purrr)
    library(dplyr)



    merge_gwas_susie <- function(gwas_h5, ldetect_rds, susie_rds, ldmrid, prior_rds) {
        stopifnot(
            !is.null(gwas_h5),
            !is.null(ldetect_rds),
            !is.null(susie_rds),
            all(file.exists(c(
                gwas_h5,
                ldetect_rds,
                susie_rds
            )))
        )

        susie_res <- readRDS(susie_rds)
        ldr <- readRDS(ldetect_rds) %>% slice(ldmrid)
        gwas_df <- read_df_h5(gwas_h5,
            "snp",
            subcols = c("snp_struct", "pval"),
            offset = as.integer(ldr$offset),
            datasize = as.integer(ldr$datasize)
        )
        prior_df <- readRDS(prior_rds)
        if (typeof(prior_df$SNP) == "character") {
            prior_df <- prior_df %>%
                separate(SNP, c("chrom", "pos", "ref", "alt"), convert = TRUE) %>%
                dplyr::mutate(chrom = as.integer(stringr::str_replace(chrom, "chr", ""))) %>%
                compact_snp_struct(snp_struct = "SNP")
        }
        ret_match <- dplyr::bind_cols(gwas_df, join_snp(
            gwas_df$snp_struct,
            prior_df$SNP
        )) %>%
            filter(!is.na(index)) %>%
            dplyr::select(snp_struct = match, index, pval)
        ret_match$prior <- prior_df$prior[ret_match$index]

        stopifnot(
            all(snp_in_region(range(ret_match$snp_struct), ldetect_EUR) == ldmrid),
            length(susie_res$alpha) == nrow(ret_match)
        )
        ret_match <- dplyr::select(ret_match, -index) %>%
            dplyr::mutate(pip = susie_res$pip, CS = FALSE)
        if(length(susie_res$sets$cs)!=1)
          return(ret_match)
        stopifnot(length(susie_res$sets$cs) == 1)
        ret_match$CS[susie_res$sets$cs[[1]]] <- TRUE
        return(ret_match)
    }




    stopifnot(!is.null(regid))

    gwas_result_df <- merge_gwas_susie(gwasf, ldgf, pipf, as.integer(regid), priorf)

    saveRDS(gwas_result_df, snakemake@output[["gwas"]])

#+END_SRC




#+BEGIN_SRC R :mkdirp :tangle ../scripts/ldmr_hicplot_data.R

    hic_file <- snakemake@input[["hic"]]
    regid <- snakemake@params[["region_id"]]


#    #source("renv/activate.R")
    library(stringr)
    library(readr)
    library(EigenH5)
    library(ldmap)
    library(tidyr)
    library(vroom)
    library(purrr)
    library(dplyr)

    hic_anno_dff <- function(hic_file, ldmrid) {
        cold <- cols(
            bait_chr = col_factor(paste0("chr", c(as.character(1:22), c("X", "Y")))),
            bait_start = col_double(),
            bait_end = col_double(),
            bait_name = col_character(),
            otherEnd_chr = col_factor(paste0("chr", c(as.character(1:22), c("X", "Y")))),
            otherEnd_start = col_double(),
            otherEnd_end = col_double(),
            otherEnd_name = col_character(),
            N_reads = col_double(),
            score = col_double()
        )
        ldmr <- ldetect_EUR[ldmrid]
        read_tsv(hic_file, col_names = names(cold$cols), col_types = cold, skip = 1L) %>%
            filter(bait_chr != "chrY", otherEnd_chr != "chrY") %>%
            compact_ldmap_region(chrom = "bait_chr", start = "bait_start", end = "bait_end", ldmap_region = "bait") %>%
            compact_ldmap_region(chrom = "otherEnd_chr", start = "otherEnd_start", end = "otherEnd_end", ldmap_region = "target") %>%
            filter(!is.na(region_in_region(bait,ldmr,TRUE)), !is.na(region_in_region(target,ldmr,TRUE)))
    }

    stopifnot(!is.null(regid))

    hic_result_df <- hic_anno_dff(hic_file,as.integer(regid))

    saveRDS(hic_result_df, snakemake@output[["hic"]])
#+END_SRC


#+BEGIN_SRC R :mkdirp :tangle ../scripts/ldmr_hicplot.R
#  #source("renv/activate.R")

  library(stringr)
  library(readr)
  library(EigenH5)
  library(ldmap)
  library(tidyr)
  library(vroom)
  library(purrr)
  library(dplyr)

  anno_file <- snakemake@input[["anno_file"]]
  region <- snakemake@params[["region"]]
  hic_file <- snakemake@input[["hic"]]
  null_file <- snakemake@input[["null_file"]]
  alt_file <- snakemake@input[["alt_file"]]

  pip_df <- inner_join(readRDS(null_file),
                       readRDS(alt_file),
                       by = c("snp_struct","pval"),
                       suffix = c("_null","_model")) %>%
    mutate(region_id = region)

  tfr <- pip_df %>%
    dplyr::arrange(snp_struct) %>%
    dplyr::mutate(lrmax = pmin(cummax(pip_model),rev(cummax(rev(pip_model))))) %>%
     dplyr::filter(lrmax > 1e-6)  %>% dplyr::pull(snp_struct)  %>% convex_hull()

    cs_df <-  dplyr::filter(pip_df,CS_model==TRUE)

  anno_df <- readRDS(anno_file) %>%
      mutate(region_id = region) %>%
      dplyr::filter(is_region_in_region(ldmap_region, tfr))

  hic_df <- readRDS(hic_file) %>%
      dplyr::mutate(region_id = y) %>%
    dplyr::filter(is_region_in_region(bait, tfr), is_region_in_region(target, tfr))

  bait_df <- dplyr::select(hic_df, ldmap_region = bait,
                           region_id) %>%
    mutate(anno = "DSC_Treated_HiC")

  target_df <- dplyr::select(hic_df, ldmap_region = target,
                             region_id) %>%
    mutate(anno = "DSC_Treated_HiC")

  plot_df <- bind_rows(anno_df,
                       bait_df,
                       target_df) %>%
    mutate(ldmap_region = as_ldmap_region(ldmap_region))


  midpoints <- function(x) {
      stopifnot(inherits(x, "ldmap_region"))
      return(starts(x) + round((ends(x) - starts(x)) / 2))
  }
  widths <- function(x) {
      stopifnot(inherits(x, "ldmap_region"))
      return(ends(x) - starts(x))
  }

  hlinel <- map(positions(cd_df$snp_struct), ~ geom_vline(xintercept = .x, col = "red", alpha = 0.2))

  add_plots <- function(proto, plot_list) {
      purrr::reduce(plot_list, `+`, .init = proto)
  }

  hicplotf <- function(reg) {
      fl <- focus_l[[reg]]

      hml <- hlinemapl[[reg]]
      df <- focus_hic_l[[reg]]

      tannogr <- focus_full_anno_l[[reg]] %>% dplyr::mutate(
          feature = str_remove(anno, "^.+dec-"),
          feature = str_remove(feature, "DSC_Treated_"),
          feat_fact = factor(feature)
      )

      df <- dplyr::mutate(df, feat_fact = factor("HiC", levels = levels(tannogr$feat_fact)))

      annoplot <- ggplot() +
          geom_tile(
              data = tannogr,
              aes(
                  x = midpoints(ldmap_region),
                  y = feat_fact,
                  width = widths(ldmap_region)
              ),
              height = .5
          ) +
          geom_curve(data = df, aes(
              x = midpoints(bait),
              y = feat_fact,
              xend = midpoints(target),
              yend = feat_fact
          )) +
          ylab("Functional Genomic Annotation") +
          xlab("Position") +
          xlim(c(starts(fl), ends(fl)))
      add_plots(annoplot, hml)
  }

  genel <- map(havegene_list, function(reg) {
      fl <- focus_l[[reg]]
      x <- focus_grtm[[reg]]
      y <- hlinemapl[[reg]]
      add_plots(x@ggplot + ylab("Genes") + xlim(c(starts(fl), ends(fl))), y)
  })
  fmplots <- list(gene = genel, anno = hicplots, ld = lddfl_vl) %>% pmap(function(gene, anno, ld) {
      (anno / gene / ld)
  })
  plan(multiprocess)

  od <- "/home/nwknoblauch/Dropbox/MOD paper 1/Fine_Mapping/"
  future_walk(seq_along(fmplots), function(i) {
      plt <- fmplots[[i]]
      name <- havegene_list[i]
      output_png <- fs::path(name, ext = "png")
      ggsave(filename = output_png, plot = plt, path = od)
  })


    library(EigenH5)
    cols <- rev(grDevices::colorRampPalette(c("#41AB5D","#BDBDBD"),
                                    space = "Lab")(200))
    ld_files <- fs::dir_ls("~/tmp/LD/",glob="*h5")
    ld_region <- str_replace(ld_files,".+/[0-9]+_([0-9]+).h5","\\1")
    ldf_df <- tibble(inputf=ld_files,region=ld_region) %>% dplyr::filter(region %in% names(focus_l))
    lddfl <- pmap(ldf_df,function(inputf,region){
      tfoc <- focus_l[[region]]
      tmpdf <- read_df_h5(inputf,"snp")
      tmpR <- read_matrix_h5(inputf,"R")
      tmpT <- as(tmpR, "dgTMatrix")
      upper <- (tmpT@i <= tmpT@j)
      df <- tibble(
        i = tmpT@i[upper], 
        j = tmpT@j[upper],
        r2 = tmpT@x[upper]^2
      ) %>% 
        mutate(isnp = tmpdf$snp_struct[i + 1],jsnp = tmpdf$snp_struct[j + 1]) %>% filter(positions(i) <=  positions(j)) %>% 
        mutate(y = (positions(jsnp) - positions(isnp)) / 2) %>% 
        dplyr::filter(is_snp_in_region(isnp,tfoc),is_snp_in_region(jsnp,tfoc)) %>%
        ggplot() +
        geom_point(aes(positions(isnp) + y, y, color = r2, alpha = r2), size = rel(0.5)) +
        scale_color_gradientn(colours=cols) +
        theme(axis.text.y = element_blank(),
              axis.ticks.y = element_blank()) +
        labs(x = "Position", y = NULL) +
        scale_alpha(guide = 'none')
    }) %>% set_names(ldf_df$region)

      focus_gr_list <- map(focus_l,function(ldmr) {
          chrp  <- paste0("chr",chromosomes(ldmr))
          start <- starts(ldmr)
          end <- ends(ldmr)

          return(GenomicRanges::GRanges(seqnames = chrp,ranges=IRanges::IRanges(start = start,end = end)))
        })
        focus_tgdl <- map(focus_gr_list,function(gr) {
          suppressMessages(tg_df <-
                             OrganismDbi::selectByRanges(
                                            x = Homo.sapiens,
                                            ranges = gr,
                                            columns = c("SYMBOL", "TXNAME")) %>%
                             as_tibble() %>%
                             dplyr::select(tx_name = TXNAME, symbol = SYMBOL) %>%
                             tidyr::unnest(cols = c(tx_name, symbol)))
          return(tg_df)
        })

      genefun <- function(tg_df,gr) {
        if(nrow(tg_df)>0){
          suppressMessages(gr.txdb <-
                             crunch(txdb, which = gr) %>%
                             tibble::as_tibble() %>%
                             dplyr::mutate(tx_name = as.character(tx_name)) %>%
                             dplyr::inner_join(tg_df) %>%
                             plyranges::as_granges() %>%
                             split(.$symbol))
        }else{
          gr.txdb <- GenomicRangesList()
          return(gr.txdb)
        }
      }


      focus_grtl <- map2(focus_tgdl, focus_gr_list, genefun)  %>% purrr::discard(~class(.x)=="SimpleGenomicRangesList")
      focus_grtm <- map(focus_grtl,autoplot)
      length(focus_grtl)

    txdb <- TxDb(Homo.sapiens)

#+END_SRC

#+BEGIN_SRC R :mkdirp :tangle ../scripts/ldmr_bigwigplot.R
  input_st
  inputf <- dir("/tmp",pattern="*bw",full.names=TRUE)
  susie_d <- "/home/nwknoblauch/Dropbox/Repos/ptb_workflowr/output/results/plot_data/susie"
  susie_f <- "/home/nwknoblauch/Dropbox/Repos/ptb_workflowr/output/results/plot_data/susie/ptb_treatedhic_512.RDS"
  susie_nullf <- "/home/nwknoblauch/Dropbox/Repos/ptb_workflowr/output/results/plot_data/susie/ptb_512.RDS"

  pip_df <- dplyr::inner_join(readRDS(susie_nullf),
                       readRDS(susie_f),by = c("snp_struct","pval"),suffix = c("_null","_model"))
  f_pip_df <- pip_df %>%  dplyr::arrange(snp_struct) %>% dplyr::mutate(lrmax = pmin(cummax(pmax(pip_model,pip_null)),rev(cummax(rev(pmax(pip_null,pip_model))))))
  fm_region <- dplyr::filter(f_pip_df,lrmax > 1e-6)  %>% dplyr::pull(snp_struct)  %>% convex_hull()
  region_r <- fm_region
  x <- inputf[1]

  library(rtracklayer)
  library(ldmap)
  library(fs)
  library(purrr)
  library(dplyr)
  library(stringr)
  library(plyranges)
  library(Gviz)


  library(biovizBase)
  library(Homo.sapiens)
  library(readr)


  #exp <- example_HiC()
  #inputf <- snakemake@input[["bigwigs"]]
  fnames <- fs::path_ext_remove((fs::path_file(inputf)))
  mark <-  str_remove(fnames,"DSC[0-9]-.+-")
  treatment <-  str_replace(fnames,"DSC[0-9]-(.+)-.+","\\1")
  (sample <-  str_replace(fnames,"(DSC[0-9])-(.+)-.+","\\1"))
  input_df <- tibble::tibble(file=inputf,name=fnames,mark=mark,treatment=treatment,sample=sample)
  ## region <- 356L
  ## region_r <- ldetect_EUR[region]
  library(biomaRt)
  bm <- useMart(host="grch37.ensembl.org", biomart="ENSEMBL_MART_ENSEMBL", dataset="hsapiens_gene_ensembl")

  ## dTrack2 <- Gviz::DataTrack(range=x, genome="hg19", type="l", chromosome=paste0("chr",chromosomes(region_r)), name="bigwig")


  ## Gviz::plotTracks(dTrack2,from=starts(region_r),to=ends(region_r))
  focus_gr <- function(ldmr){
    chrp  <- paste0("chr",chromosomes(ldmr))
    start <- starts(ldmr)
    end <- ends(ldmr)

    return(GenomicRanges::GRanges(seqnames = chrp,ranges=IRanges::IRanges(start = start,end = end)))
  }

  region_r <- ldetect_EUR[512]
  gr <- focus_gr(region_r)
  sn <- as.character(seqnames(gr))
  biomTrack <- BiomartGeneRegionTrack(genome="hg19", chromosome=sn,start=starts(region_r),end=ends(region_r),geneSymbols=TRUE,name="ENSEMBL", filter=list(with_refseq_mrna=TRUE),biomart=bm,stacking="squish")

  top2 <- filter(pip_df, pip_model == max(pip_model))


  igrf <- function(tdf,ty){
    tyd <- ty$treatment
    inpl <- purrr::pmap(tdf, function(file, name, sample, ...){
      rtracklayer::import(file, which = gr)
    }) %>% plyranges::bind_regions() %>% disjoin_regions(score=mean(score)) 
    inpl %>% tibble::as_tibble() %>%
      dplyr::rename({{tyd}} := score) %>% 
      plyranges::as_granges()
  }

  ngrf <- function(idf,y, ...){
    rrangel <- group_by(idf,treatment) %>%
      group_map(igrf)  %>%  purrr::reduce(join_overlap_inner)
    dtrack <- Gviz::DataTrack(rrangel,groups=c("dec","unt"),name=glue::glue("{y$mark}"),type="hist",window=-1,windowSize=1500)
  }

  idf <- dplyr::filter(input_df,mark==mark[1])
  tdf <- filter(idf,treatment==treatment[1])
  rangel <- group_by(input_df,mark) %>% group_map(ngrf)

  trackl <- c(biomTrack,rangel)
  strt <- positions(top2$snp_struct)
  grangel <- HighlightTrack(trackl,chromosome=sn,start=strt,width=10)
  png(file="/home/nwknoblauch/Dropbox/Hand2.png")
  plotTracks(c(grangel),chromosome=sn,from=starts(region_r),to=ends(region_r))
  dev.off()

  GeneRegionTrack(txdb)
  rangeld <- lapply(rangel,function(df){
    mrk <- df$mark[1]
    df <- plyranges::select(df,-mark)
 
  })

    rangeldf <- bind_regions(rangel)


  plotTracks(rangeld,groups=c("DSC1","DSC2","DSC3"),type=c("a","p"))






  as_grange_df <- function(df, ...) {
    rl <- rlang::list2(...)
    explode_ldmap_region(df) %>%
      dplyr::rename(seqnames = chrom) %>%
      mutate(seqnames = as.character(seqnames)) %>%
      mutate(!!!rl) %>%
      plyranges::as_granges()
  }

  as_ldmr <- function(df) {
    tibble::as_tibble(df) %>%
      dplyr::mutate(seqnames = as.integer(stringr::str_remove(seqnames,"chr"))) %>% 
dplyr::select(-width) %>% 
      compact_ldmap_region(chrom = "seqnames")
  }


  read_df <- as_ldmr(ranged) %>% dplyr::select(-strand)
  pread_df <- tidyr::pivot_wider(read_df,names_from=c("mark","sample","treatment"),values_from=c("score"))
  ldmdf <- as_ldmr(out.gr)
#+END_SRC


#+BEGIN_SRC shell 

rsync -av rcc2:/project2/xinhe/software/ldsc/workflow/results ../workflow/results
#+END_SRC

#+RESULTS:
| receiving                                        | incremental | file                | list      |           |       |            |           |
| created                                          | directory   | ../workflow/results |           |           |       |            |           |
| results/                                         |             |                     |           |           |       |            |           |
| results/fgd/                                     |             |                     |           |           |       |            |           |
| results/fgd/clean_reproduciblemerged.log         |             |                     |           |           |       |            |           |
| results/fgd/clean_reproduciblemerged.results     |             |                     |           |           |       |            |           |
| results/fgd/clean_reproduciblemergedcsmc.log     |             |                     |           |           |       |            |           |
| results/fgd/clean_reproduciblemergedcsmc.results |             |                     |           |           |       |            |           |
| results/fgd/full_reproduciblemerged.log          |             |                     |           |           |       |            |           |
| results/fgd/full_reproduciblemerged.results      |             |                     |           |           |       |            |           |
| results/fgd/full_reproduciblemergedcsmc.log      |             |                     |           |           |       |            |           |
| results/fgd/full_reproduciblemergedcsmc.results  |             |                     |           |           |       |            |           |
| results/fgd/reproducible_merged.log              |             |                     |           |           |       |            |           |
| results/fgd/reproducible_merged.results          |             |                     |           |           |       |            |           |
| results/fgd/reproducible_up_down.log             |             |                     |           |           |       |            |           |
| results/fgd/reproducible_up_down.results         |             |                     |           |           |       |            |           |
| results/plot/                                    |             |                     |           |           |       |            |           |
| results/plot/LD/                                 |             |                     |           |           |       |            |           |
| results/plot/LD/15.RDS                           |             |                     |           |           |       |            |           |
| results/plot_data/                               |             |                     |           |           |       |            |           |
| results/plot_data/LD/                            |             |                     |           |           |       |            |           |
| results/plot_data/LD/15.RDS                      |             |                     |           |           |       |            |           |
| results/plot_data/anno/                          |             |                     |           |           |       |            |           |
| results/plot_data/anno/allhic_15.RDS             |             |                     |           |           |       |            |           |
| results/plot_data/anno/allhic_181.RDS            |             |                     |           |           |       |            |           |
| results/plot_data/anno/allhic_353.RDS            |             |                     |           |           |       |            |           |
| results/plot_data/anno/allhic_356.RDS            |             |                     |           |           |       |            |           |
| results/plot_data/anno/allhic_362.RDS            |             |                     |           |           |       |            |           |
| results/plot_data/anno/allhic_363.RDS            |             |                     |           |           |       |            |           |
| results/plot_data/anno/allhic_373.RDS            |             |                     |           |           |       |            |           |
| results/plot_data/anno/allhic_512.RDS            |             |                     |           |           |       |            |           |
| results/plot_data/anno/allhic_614.RDS            |             |                     |           |           |       |            |           |
| results/plot_data/anno/allhic_973.RDS            |             |                     |           |           |       |            |           |
| results/plot_data/genes/                         |             |                     |           |           |       |            |           |
| results/plot_data/genes/15.RDS                   |             |                     |           |           |       |            |           |
| results/plot_data/genes/15_genelist.txt.gz       |             |                     |           |           |       |            |           |
| results/plot_data/genes/181.RDS                  |             |                     |           |           |       |            |           |
| results/plot_data/genes/181_genelist.txt.gz      |             |                     |           |           |       |            |           |
| results/plot_data/genes/353.RDS                  |             |                     |           |           |       |            |           |
| results/plot_data/genes/353_genelist.txt.gz      |             |                     |           |           |       |            |           |
| results/plot_data/genes/356.RDS                  |             |                     |           |           |       |            |           |
| results/plot_data/genes/356_genelist.txt.gz      |             |                     |           |           |       |            |           |
| results/plot_data/genes/362.RDS                  |             |                     |           |           |       |            |           |
| results/plot_data/genes/362_genelist.txt.gz      |             |                     |           |           |       |            |           |
| results/plot_data/genes/363.RDS                  |             |                     |           |           |       |            |           |
| results/plot_data/genes/363_genelist.txt.gz      |             |                     |           |           |       |            |           |
| results/plot_data/genes/373.RDS                  |             |                     |           |           |       |            |           |
| results/plot_data/genes/373_genelist.txt.gz      |             |                     |           |           |       |            |           |
| results/plot_data/genes/512.RDS                  |             |                     |           |           |       |            |           |
| results/plot_data/genes/512_genelist.txt.gz      |             |                     |           |           |       |            |           |
| results/plot_data/genes/614.RDS                  |             |                     |           |           |       |            |           |
| results/plot_data/genes/614_genelist.txt.gz      |             |                     |           |           |       |            |           |
| results/plot_data/genes/973.RDS                  |             |                     |           |           |       |            |           |
| results/plot_data/genes/973_genelist.txt.gz      |             |                     |           |           |       |            |           |
| results/plot_data/hic/                           |             |                     |           |           |       |            |           |
| results/plot_data/hic/15.RDS                     |             |                     |           |           |       |            |           |
| results/plot_data/hic/181.RDS                    |             |                     |           |           |       |            |           |
| results/plot_data/hic/353.RDS                    |             |                     |           |           |       |            |           |
| results/plot_data/hic/356.RDS                    |             |                     |           |           |       |            |           |
| results/plot_data/hic/362.RDS                    |             |                     |           |           |       |            |           |
| results/plot_data/hic/363.RDS                    |             |                     |           |           |       |            |           |
| results/plot_data/hic/373.RDS                    |             |                     |           |           |       |            |           |
| results/plot_data/hic/512.RDS                    |             |                     |           |           |       |            |           |
| results/plot_data/hic/614.RDS                    |             |                     |           |           |       |            |           |
| results/plot_data/hic/973.RDS                    |             |                     |           |           |       |            |           |
| results/plot_data/susie/                         |             |                     |           |           |       |            |           |
| results/plot_data/susie/ptb_allhic_15.RDS        |             |                     |           |           |       |            |           |
| results/plot_data/susie/ptb_allhic_181.RDS       |             |                     |           |           |       |            |           |
| results/plot_data/susie/ptb_allhic_353.RDS       |             |                     |           |           |       |            |           |
| results/plot_data/susie/ptb_allhic_356.RDS       |             |                     |           |           |       |            |           |
| results/plot_data/susie/ptb_allhic_362.RDS       |             |                     |           |           |       |            |           |
| results/plot_data/susie/ptb_allhic_363.RDS       |             |                     |           |           |       |            |           |
| results/plot_data/susie/ptb_allhic_373.RDS       |             |                     |           |           |       |            |           |
| results/plot_data/susie/ptb_allhic_512.RDS       |             |                     |           |           |       |            |           |
| results/plot_data/susie/ptb_allhic_614.RDS       |             |                     |           |           |       |            |           |
| results/ptb/                                     |             |                     |           |           |       |            |           |
| results/ptb/clean_reproduciblemerged.log         |             |                     |           |           |       |            |           |
| results/ptb/clean_reproduciblemerged.results     |             |                     |           |           |       |            |           |
| results/ptb/clean_reproduciblemergedcsmc.log     |             |                     |           |           |       |            |           |
| results/ptb/clean_reproduciblemergedcsmc.results |             |                     |           |           |       |            |           |
| results/ptb/full_reproduciblemerged.log          |             |                     |           |           |       |            |           |
| results/ptb/full_reproduciblemerged.results      |             |                     |           |           |       |            |           |
| results/ptb/full_reproduciblemergedcsmc.log      |             |                     |           |           |       |            |           |
| results/ptb/full_reproduciblemergedcsmc.results  |             |                     |           |           |       |            |           |
| results/ptb/reproducible_merged.log              |             |                     |           |           |       |            |           |
| results/ptb/reproducible_merged.results          |             |                     |           |           |       |            |           |
| results/ptb/reproducible_up_down.log             |             |                     |           |           |       |            |           |
| results/ptb/reproducible_up_down.results         |             |                     |           |           |       |            |           |
|                                                  |             |                     |           |           |       |            |           |
| sent                                             | 1,480       | bytes               | received  | 8,011,197 | bytes | 942,667.88 | bytes/sec |
| total                                            | size        | is                  | 8,005,117 | speedup   | is    |        1.0 |           |



*** eQTL mapping

#+BEGIN_SRC snakemake :mkdirp :tangle ../workflow/eqtl_snakefile

  rule gwas_h52torus:
      input:
          inputf=config_d['GENO']
          snplist = expand(config_d['1KG'] +"1000G_EUR_Phase3_plink/1000G.EUR.QC.{chrom}.bim",chrom=range(1,23))
      output:
          outputf=config_d['GWAS'] +"{gwas}_torus.txt.gz"
      conda:
          config_e['r']
      script:
          "../scripts/gen_torus_sumstats.R"


#+END_SRC



#+BEGIN_SRC R :session 
  snplistf <- glue::glue("/run/media/nwknoblauch/Data/1kg/1000G_EUR_Phase3_plink/1000G.EUR.QC.{1:22}.bim")
      bc <- bim_cols(chrom = col_chromosome(prefix_chr=FALSE))
  kgsnp_df <- purrr::map_df(snplistf,
                            ~dplyr::select(read_plink_bim(.x,cols = bc),snp_struct))
#+END_SRC

#+BEGIN_SRC R :session 

kgsnp_df <- arrange(kgsnp_df,snp_struct) %>% mutate(region_id= snp_in_region(snp_struct,ldetect_EUR),ldmr=ldetect_EUR[region_id])
#+END_SRC

#+BEGIN_SRC R :session :colnames yes

rename(sig_snp_fdr,locus=ldmr) %>% group_by(locus) %>% filter(pval==min(pval)) %>% slice(1) %>% ungroup()
#+END_SRC

#+RESULTS:
|  rej | region_id |         fdr | decision | locus                    |      pval | snp_struct          |
|------+-----------+-------------+----------+--------------------------+-----------+---------------------|
|    3 |        15 | 3.38354e-06 |        1 | chr1:21736588_23086883   | 6.414e-13 | chr1:22468215_T_C   |
|    4 |       353 |  0.00101615 |        1 | chr3:121974097_123517768 |  8.56e-10 | chr3:123085359_T_C  |
|    2 |       356 | 9.27161e-07 |        1 | chr3:126214943_128194861 | 3.991e-13 | chr3:127869598_C_A  |
|   10 |       363 |     0.18815 |        0 | chr3:139954597_141339097 | 4.885e-09 | chr3:141112860_NA_S |
|    5 |       373 |  0.00128931 |        1 | chr3:154714218_156008700 | 3.827e-10 | chr3:155855501_NA_S |
|    1 |       614 | 3.79167e-19 |        1 | chr5:156628700_158825698 | 1.637e-26 | chr5:157888115_T_C  |
| 1509 |      1455 |    0.968653 |        0 | chr16:46399473_49007926  | 3.391e-09 | chr16:47665580_T_C  |


#+BEGIN_SRC R :session :colnames yes


  snp_df <- mutate(snp_df,region_id= snp_in_region(snp_struct,ldetect_EUR),ldmr=ldetect_EUR[region_id])
  sig_regions <- distinct(sig_snp_df,region_id)
  tkg_df <- semi_join(kgsnp_df,sig_regions) %>% explode_snp_struct(remove=FALSE) 
  tsnp_df <- semi_join(snp_df,sig_regions) %>% explode_snp_struct(remove=FALSE) %>%semi_join(tkg_df,by=c("chrom","pos"))
  
  inner_join(tsnp_df,torus_null_fdr) %>%
    rename(locus=ldmr) %>%
    group_by(locus) %>%
    filter(pval==min(pval)) %>%
    slice(1) %>%
    ungroup()
#+END_SRC

#+RESULTS:
| rej | region_id |         fdr | decision | locus                    |      pval | chrom |       pos | ref | alt |
|-----+-----------+-------------+----------+--------------------------+-----------+-------+-----------+-----+-----|
|   3 |        15 | 3.38354e-06 |        1 | chr1:21736588_23086883   | 6.414e-13 |     1 |  22468215 | T   | C   |
|   4 |       353 |  0.00101615 |        1 | chr3:121974097_123517768 |  8.56e-10 |     3 | 123085359 | T   | C   |
|   2 |       356 | 9.27161e-07 |        1 | chr3:126214943_128194861 | 3.991e-13 |     3 | 127869598 | C   | A   |
|   5 |       373 |  0.00128931 |        1 | chr3:154714218_156008700 | 2.056e-09 |     3 | 155855597 | G   | A   |
|   1 |       614 | 3.79167e-19 |        1 | chr5:156628700_158825698 | 1.637e-26 |     5 | 157888115 | T   | C   |


** motifbreakR

#+BEGIN_SRC R 



#+END_SRC
